@layout LoginLayout
@page "/login"
@using MaxSecurityWAF
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRunTime


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
</head>
<body>
    <div>
        <h2>Login</h2>
        <form action="login_process.php" method="POST">
            <input type="text" name="username" placeholder="Username" required><br>
            <input type="password" name="password" placeholder="Password" required><br>
            <input type="submit" value="Login">
        </form>
    </div>
</body>
</html>



@code {

    private User user = new User();
    // public string LoginMesssage { get; set; }
    // ClaimsPrincipal? claimsPrincipal;

    // [CascadingParameter]
    // private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();

    }
    /*   claimsPrincipal = (await authenticationStateTask).User;

  if (claimsPrincipal.Identity.IsAuthenticated)
  {
      NavigationManager.NavigateTo("/index");
  }
  {
      user.username = "admin";
      user.Password = "password";
  }

} */

    private async Task<bool> ValidateUser()
    {
        //assume that user is valid
        //call an API

        /*  var returnedUser = await userService.LoginAsync(user);

          if (returnedUser.username != null)
          {
              await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
              NavigationManager.NavigateTo("/index");
          }
          else
          {
              LoginMesssage = "Invalid username or password";
          }  */


        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user.username);
        NavigationManager.NavigateTo("/index");

        return await Task.FromResult(true);

    }


}