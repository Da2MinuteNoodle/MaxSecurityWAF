@page "/Admin/Logs"
@inject ILogService logService
@implements IDisposable

@attribute [Authorize]

<h2>Log Entries</h2>

<div style="margin-bottom:20px">
    <input type="text" @onchange=FilterLog placeholder="Search...." />
    <button onclick="window.location.href='/Admin/Logs.csv'">Export CSV</button>
    <button onclick="window.location.href='/Admin/Logs.json'">Export JSON</button>
</div>

<table class="data-table">
    <thead>
        <tr>
            <th>Timestamp</th>
            <th>Source IP</th>
            <th>URL</th>
            <th>Outcome</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var entry in logEntries) {
            <tr>
                <td>@entry.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>@entry.SourceIP</td>
                <td>@entry.Url</td>
                <td>@entry.Result</td>
            </tr>
        }
        @for(int i = 0; i < 30 - logEntries.Count(); i++) {
            <tr>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<LogEntry> logEntries = new();
    private string?        filter;

    protected override void OnInitialized() {
        logEntries = logService.LogEntries.ToList();
        // Register to be notified if the log is changed after
        // our initial render.
        logService.LogUpdated += LogUpdated;
    }

    private void FilterLog(ChangeEventArgs e) {
        filter = (string?) e.Value;
        if(!string.IsNullOrWhiteSpace(filter))
            logEntries = logService.GetFilteredLogs(filter).ToList();
        else
            logEntries = logService.LogEntries.ToList();
        StateHasChanged();
    }

    // Automatically re-render the log view page as messages
    // roll in. This will clear the user's search.
    // TODO: don't clear the user's search
    public void LogUpdated(object? sender, LogEntry entry) =>
        InvokeAsync(() => {
            if(string.IsNullOrEmpty(filter)) {
                logEntries.Insert(0, entry);
                StateHasChanged();
            }
        });

    // Absolutely essential
    // This is required to ensure we free up resources and
    // don't re-render 1000's of inactive pages.
    public void Dispose() =>
        logService.LogUpdated -= LogUpdated;
}