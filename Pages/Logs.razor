@page "/logs"
@using System.Text
@using System.Text.Json
@using System.Text.Encodings
@using System.Collections.Generic
@using System.Linq
@inject LogService logService
@implements IDisposable


<h3>Log Entries</h3>

<div>
    <input type="text" @bind="filterText" placeholder="Search...." />
    <button @onclick="ExportLogsCSV">Export as CSV</button>
    <button @onclick="ExportLogsJSON">Export as JSON</button>
    <a href="@downloadLink" download="@downloadFileName">@downloadFileName</a>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Timestamp</th>
            <th>Source IP</th>
            <th>URL</th>
            <th>Outcome</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in filteredLogs) {
            <tr>
                <td>@entry.Timestamp</td>
                <td>@entry.SourceIP</td>
                <td>@entry.Url</td>
                <td>@entry.Result</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<LogEntry> filteredLogs = new List<LogEntry>();
    private string filterText = "";
    private string downloadLink;
    private string downloadFileName;

    protected override void OnInitialized() {
        InitialLoad();
        // Register to be notified if the log is changed after
        // our initial render.
        logService.LogUpdated += LogUpdated;
    }

    private void InitialLoad() {
        filteredLogs = logService.LogEntries;
        filterText = "";
        StateHasChanged();
    }

    private void FilterLogs() {
        filteredLogs = logService.GetFilteredLogs(filterText);
    }

    private void ExportLogsCSV() {
        FilterLogs();
        var csvContent = string.Join("\n", filteredLogs.Select(log => $"{log.Timestamp},{log.SourceIP},{log.Url},{log.Result}"));
        DownloadFile("logs.csv", "text/csv", csvContent);
    }

    private void ExportLogsJSON() {
        FilterLogs();
        var jsonContent = JsonSerializer.Serialize(filteredLogs, new JsonSerializerOptions { WriteIndented = true });
        DownloadFile("logs.json", "application/json", jsonContent);
    }

    private MarkupString DownloadFile(string fileName, string contentType, string content) {
        var bytes = Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        var href = $"data:{contentType};base64,{base64}";

        downloadLink = href;
        downloadFileName = fileName;

        return (MarkupString)$"<a href=\"{href}\" download=\"{fileName}\">{fileName}</a>";
    }

    // Automatically re-render the log view page as messages
    // roll in. This will clear the user's search.
    // TODO: don't clear the user's search
    public void LogUpdated(object? sender, EventArgs e) =>
        InvokeAsync(() => InitialLoad());

    // Absolutely essential
    // This is required to ensure we free up resources and
    // don't re-render 1000's of inactive pages.
    public void Dispose() =>
        logService.LogUpdated -= LogUpdated;
}